createdAt: "2018-10-15T10:40:03.594Z"
updatedAt: "2018-10-15T12:42:44.661Z"
type: "MARKDOWN_NOTE"
folder: "f0c7aae407ee3ecfae75"
title: "Loops - For Loops and While Loops (and ranges in detail)"
content: '''
  
  #### Loops - For Loops and While Loops (and ranges in detail)
  
  Loops are used in python to iterate or loop over a collection of items, or numbers in a range etc
  
  ##### For Loops
  The basic format of a *for*  loop:
  
  ```python
  for item in iterable_object:
      #do something
  ```
  
  *item* can be called anything e.g *num* or  *number* if you are iterating over a list of numbers. It can literally be called *each_num* if you want. All you are doing here is assigning each thing (item) in the collection a temporary variable name so it can be accessed and you can do stuff with it during that particular iteration.
  
  An example of printing numbers to the screen:
  
  ```python
  for each_num in range(1,4):
      print(each_num)
  #1
  #2
  #3
  ```
  Note that the range function will not include the upper limit number so range(1,10) is 1 through to 9 and doesnt include 10.
  
  ##### Ranges in detail
  Ranges are used to generate a sequence of numbers. Not random numbers, but a sequence.
  
  The first number is the starting number, and the second is exclusive (as seen earlier). 
  
  But you can also specify an interval. 
  
  ```python
  for each_num in range(1,10,2):
      print(each_num)
  #1
  #3
  #5
  #7
  #9
  ```
  Note that the sequence starts at 1, goes up by 2 each time, and then stops before getting to 10 as its exclusive. But the interval can also be a negative number, which means that it steps does down each time.
  
  ```python
  my_nums = range(10,0,-1)
  
  print(my_nums) #range(10,1,-1)
  list(my_nums) # [10, 9, 8, 7, 6, 5, 4, 3, 2]
  #Note that list() creates a list of all items in an iterable
  ```
  You can also supply the range() function with one number:
  
  ```python
  for num in range(3):
      print(num)
  #0
  #1
  #2
  ```
  In the example above, we see that the default behaviour when supplied with only one number as the argument is to start at 0, and then go up to but not include the number given.
  ##### While Loops
  ```python
  while is_tired:
      #get coffee
  ``````
  A while loop continues to iterate while a condition is true.
  ```python
  user_reponse = None
  
  while user_response != "quit"
      user_reponse = input("This message will continue to print until you type 'quit'")  
  `````
  Note that if the condition is never false, the loop will never stop i.e an infinte loop.
  
  ##### Writing a for loop as a while loop
  You can achieve the same thing whichever loop you use.
  
  Take a look at the following for loop:
  ```python
  for num in range(1,11):
      print(num)
  ```
  This can be written as a while loop:
  ```python
  num = 1
  
  while num < 11:
      print(num)
      num += 1
  ```
  Even in other languages like C# or JavaSript, all the loops i.e for, while, do while and foreach loops can all be used to do the same thing. So it depends on what makes sense for the given situation, and your preference.
  
  
'''
tags: []
isStarred: false
isTrashed: false
