createdAt: "2018-10-17T15:11:55.106Z"
updatedAt: "2018-10-17T21:29:15.537Z"
type: "MARKDOWN_NOTE"
folder: "f0c7aae407ee3ecfae75"
title: "Lists - Lists Methods Index, Count, Sort, Reverse and Join"
content: '''
  ##### Lists - Lists Methods Index, Count, Sort, Reverse and Join
  
  ###### Index
  Index will tell us where an item exists in the list i.e its position.
  ```python
  numbers = [5, 6, 7, 8, 9, 10]
  numbers.index(6) #1
  ```
  In the above example, we want to know the position of 6, so the first instance is found and its position (at index position 1) is returned.
  
  It will start looking for a match from index 0 until it finds the first match. But if you want the search for the pattern to begin not at the beginning of the list but elsewhere, you can provide a second argument which specifies from which index position to start looking for the match.
  
  ```python
  names = ["colt", "steele", "dan", "colt" "bader"]
  
  names.index("colt", 2) #3
  ```
  You can also specify an end position i.e the point at which to stop searching for a match
  
  ```python
  numbers = [5,5,6,7,5,8,8,9,10]
  numbers.index(8,6,8) # 6
  ```
  In the above example, we are looking for 8, but only between index positions 6 and 8 and not beyond that specified range.
  ###### Count
  Count will return the number of times something appears in the list:
  ```python
  names = ["dan", "bob", "bob", "james"]
  names.count("bob") # 2
  ```
  If there aren't any matches, it will return 0. In other words, its like saying "How many times does x appear if at all in this list?"
  
  ###### Reverse
  Reverse will simply reverse the order of the items in a list. It won't produce a copy of the list or keep the original or return anything, it simply updates the list so that its in the reverse order:
  ```python
  numbers = [1, 2, 3]
  numbers.reverse()
  print(numbers) #[3, 2, 1]
  ```
  ###### Sort
  Sort will sort items in ascending order. You don't provide it an argument:
  ```python
  nums = [6,3,8,1,3,2]
  nums.sort()
  print(nums) #[1, 2, 3, 3, 6, 8]
  ```
  This also works alphabetically:
  ```python
  words = ["banana", "orange", "cat", "auto"]
  words.sort()
  print(words) 
  #['auto', 'banana', 'cat', 'orange']
  ```
  ###### Join
  Join is actually a string method, but can be used on a list to concatenate all the items within the list such as the following:
  
  ```python
  my_list = ["to", "be", "joined"]
  together = ' '.join(my_list)
  print(together) #'to be joined'
  ```
  We have specified the concantenation to take place with spaces, so the result becomes like a sentence, but we can put any characters in between if we like. For example:
  ```python
  directories = ["Documents", "BabaStuff", "Notes"]
  path_to_notes = '/'.join(directories)
  print(path_to_notes)
  #'Documents/BabaStuff/Notes'
  ```
  Note that the original list is not changed. The join method just returns a new string, which we can put into a variable or print to the screen if we want.
  
  We'll know move on to slices in the next section, which is used to retrieve parts of a list or a chunk of a list.
'''
tags: []
isStarred: false
isTrashed: false
